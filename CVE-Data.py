import requests
import json
import time
from urllib3.exceptions import InsecureRequestWarning
import urllib3

# Disable SSL warnings
urllib3.disable_warnings(InsecureRequestWarning)


def fetch_and_save_cve_data(keyword):
    # API configuration
    base_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    }

    # Request parameters
    params = {
        "keywordSearch": keyword,
        "resultsPerPage": 2000,  # Maximum allowed by the API
        "startIndex": 0
    }

    # Retry configuration
    max_retries = 3
    retry_delay = 30  # Seconds
    rate_limit_delay = 6  # Seconds

    # Output file configuration
    output_file = f"cve_data_{keyword}.jsonl"  # Include keyword in the filename

    try:
        with open(output_file, "w", encoding="utf-8") as outfile:
            total_results = None
            record_count = 0

            while True:
                # Construct the request URL
                url = f"{base_url}?{'&'.join([f'{k}={v}' for k, v in params.items()])}"
                print(f"Fetching: {url}")

                # Send the request (with retry logic)
                for attempt in range(max_retries):
                    try:
                        response = requests.get(
                            url,
                            headers=headers,
                            verify=False,
                            timeout=30
                        )

                        if response.status_code == 200:
                            data = response.json()
                            break
                        elif response.status_code == 429:
                            print(f"[Attempt {attempt + 1}] Rate limited. Retrying in {retry_delay}s...")
                            time.sleep(retry_delay)
                        else:
                            print(f"HTTP Error {response.status_code}")
                            return
                    except Exception as e:
                        print(f"[Attempt {attempt + 1}] Request failed: {str(e)}")
                        if attempt == max_retries - 1:
                            return
                        time.sleep(retry_delay)
                else:
                    print("Max retries exceeded")
                    return

                # Initialize total results
                if total_results is None:
                    total_results = data["totalResults"]
                    print(f"Total records to fetch: {total_results}")

                # Process each vulnerability
                for vulnerability in data.get("vulnerabilities", []):
                    cve_info = vulnerability.get("cve", {})

                    # Extract fields
                    cve_id = cve_info.get("id", "N/A")
                    published = cve_info.get("published", "N/A")

                    # Extract English description
                    en_desc = next(
                        (desc["value"].strip().replace("\n", " ")
                         for desc in cve_info.get("descriptions", [])
                         if desc.get("lang") == "en"),
                        "No English description available"
                    )

                    # Build the record
                    json_record = {
                        "instruction": f"Provide detailed information about a CVE identifier, including CVE number, description, and publication date.",
                        "inputs": f"{cve_id}",
                        "outputs": f"CVE:{cve_id}\nDescription:{en_desc}\npublished:{published}"

                    }

                    # Write to file
                    outfile.write(json.dumps(json_record, ensure_ascii=False) + "\n")
                    record_count += 1

                # Update the index
                params["startIndex"] += params["resultsPerPage"]
                if params["startIndex"] >= total_results:
                    break

                # Respect rate limits
                time.sleep(rate_limit_delay)

        print(f"\nSuccessfully saved {record_count} records to {output_file}")

    except KeyboardInterrupt:
        print(f"\nInterrupted. Partial data saved with {record_count} records.")
    except Exception as e:
        print(f"Critical error: {str(e)}")


if __name__ == "__main__":
    keyword = "CVE-2025"  # You can change the keyword as needed
    fetch_and_save_cve_data(keyword)